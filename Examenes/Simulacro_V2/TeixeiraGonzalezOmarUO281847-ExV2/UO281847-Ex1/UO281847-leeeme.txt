Omar Teixeira Gonz√°lez, UO281847:
Ejercicio 1:

122,Process [@G%d - %s@@] has caused an interrupt (illegal HALT execution) and is being terminated\n

OS 5 // IllegalHaltExecution Interrupt
IRET

//Examen-Simulacro-2022
enum INT_BITS {SYSCALL_BIT=2, ILLEGALHALTEXECUTION_BIT = 5, EXCEPTION_BIT=6, CLOCKINT_BIT=9};

// Initialization of the interrupt vector table
void Processor_InitializeInterruptVectorTable(int interruptVectorInitialAddress) {
	int i;
	for (i=0; i< INTERRUPTTYPES;i++) { // Inicialice all to inicial IRET
		interruptVectorTable[i]=interruptVectorInitialAddress-2;  
	}

	interruptVectorTable[SYSCALL_BIT]=interruptVectorInitialAddress;  // SYSCALL_BIT=2
	interruptVectorTable[EXCEPTION_BIT]=interruptVectorInitialAddress+2; // EXCEPTION_BIT=6
	//V1-EX2c-BEGIN
	interruptVectorTable[CLOCKINT_BIT]=interruptVectorInitialAddress+4;
	//V1-EX2c-END
	//Examen-Simulacro-2022
	interruptVectorTable[ILLEGALHALTEXECUTION_BIT]=interruptVectorInitialAddress+6;
}

// Decode and execute the instruction in the IR register
void Processor_DecodeAndExecuteInstruction() {
	int tempAcc; // for save accumulator if necesary

	// Decode
	int operationCode=Processor_DecodeOperationCode(registerIR_CPU);
	int operand1=Processor_DecodeOperand1(registerIR_CPU);
	int operand2=Processor_DecodeOperand2(registerIR_CPU);

	Processor_DeactivatePSW_Bit(OVERFLOW_BIT);

	// Execute
	switch (operationCode) {
	  
		// Instruction ADD
		case ADD_INST:
			registerAccumulator_CPU= operand1 + operand2;
			Processor_CheckOverflow(operand1,operand2);
			registerPC_CPU++;
			break;
		
		// Instruction SHIFT (SAL and SAR)
		case SHIFT_INST: 
			  if (operand1<0) { // SAL do not allow more than 31 bists shift...
			  	if (registerAccumulator_CPU & (-1<<(sizeof(int)*8-((-operand1)&0x1f)))) // some bit overflow...
			  		Processor_ActivatePSW_Bit(OVERFLOW_BIT);
			  	registerAccumulator_CPU <<= ((-operand1) & 0x1f);// unnecesary & because Intel make this way...
			  } 
			  else	// SAR do not allow more than 31 bists shift...
			  	registerAccumulator_CPU >>= operand1 & 0x1f;// unnecesary & because Intel make this way...
			  
			  registerPC_CPU++;
			  break;
		
		// Instruction DIV
		case DIV_INST: 
			if (operand2 == 0)
				Processor_RaiseInterrupt(EXCEPTION_BIT); 
			else {
				registerAccumulator_CPU=operand1 / operand2;
				registerPC_CPU++;
			}
			break;
			  
		// Instruction TRAP
		case TRAP_INST: 
			Processor_RaiseInterrupt(SYSCALL_BIT);
			registerA_CPU=operand1;
			registerPC_CPU++;
			break;
		
		// Instruction NOP
		case NOP_INST: 
			registerPC_CPU++;
			break;
			  
		// Instruction JUMP
		case JUMP_INST: 
			registerPC_CPU+= operand1;
			break;
			  
		// Instruction ZJUMP
		case ZJUMP_INST: // Jump if ZERO_BIT on
			if (Processor_PSW_BitState(ZERO_BIT))
				registerPC_CPU+= operand1;
			else
				registerPC_CPU++;
			break;

		// Instruction WRITE
		case WRITE_INST: 
			registerMBR_CPU.cell=registerAccumulator_CPU;
			registerMAR_CPU=operand1;
			// Send to the main memory controller the data to be written: use the data bus for this
			Buses_write_DataBus_From_To(CPU, MAINMEMORY);
			// Send to the MMU controller the address in which the writing has to take place: use the address bus for this
			Buses_write_AddressBus_From_To(CPU, MMU);
			// Tell the MMU controller to write
			registerCTRL_CPU=CTRLWRITE;
			Buses_write_ControlBus_From_To(CPU,MMU);
			registerPC_CPU++;
			break;

		// Instruction READ
		case READ_INST: 
			registerMAR_CPU=operand1;
			// Send to the MMU controller the address in which the reading has to take place: use the address bus for this
			Buses_write_AddressBus_From_To(CPU, MMU);
			// Tell the MMU controller to read
			registerCTRL_CPU=CTRLREAD;
			Buses_write_ControlBus_From_To(CPU,MMU);

			// Copy the read data to the accumulator register
			registerAccumulator_CPU= registerMBR_CPU.cell;
			registerPC_CPU++;
			break;

		// Instruction INC
		case INC_INST: 
			tempAcc=registerAccumulator_CPU;
			registerAccumulator_CPU += operand1;
			Processor_CheckOverflow(tempAcc,operand1);
			registerPC_CPU++;
			break;

		//V1-EX16a-BEGIN
		// Instruction HALT
		case HALT_INST: 
			if (Processor_PSW_BitState(EXECUTION_MODE_BIT)) {
				Processor_ActivatePSW_Bit(POWEROFF_BIT);
			} else {
				//Examen-Simulacro-2022
				Processor_RaiseInterrupt(ILLEGALHALTEXECUTION_BIT);
			}			
			break;
			  
		// Instruction OS
		case OS_INST: // Make a operating system routine in entry point indicated by operand1
			if (Processor_PSW_BitState(EXECUTION_MODE_BIT)) {
				// Show final part of HARDWARE message with CPU registers
				// Show message: " (PC: registerPC_CPU, Accumulator: registerAccumulator_CPU, PSW: registerPSW_CPU [Processor_ShowPSW()]\n
				ComputerSystem_DebugMessage(69, HARDWARE,InstructionNames[operationCode],operand1,operand2,registerPC_CPU,registerAccumulator_CPU,registerPSW_CPU,Processor_ShowPSW());
				// Not all operating system code is executed in simulated processor, but really must do it... 
				OperatingSystem_InterruptLogic(operand1);
				registerPC_CPU++;
				// Update PSW bits (ZERO_BIT, NEGATIVE_BIT, ...)
				Processor_UpdatePSW();
				return; // Note: message show before... for operating system messages after...
			} else {
				Processor_RaiseInterrupt(EXCEPTION_BIT);
				return; // Note: message show before... for operating system messages after...
			}
		// Instruction IRET
		case IRET_INST: // Return from a interrupt handle manager call
			if (Processor_PSW_BitState(EXECUTION_MODE_BIT)) {
				registerPC_CPU=Processor_CopyFromSystemStack(MAINMEMORYSIZE-1);
				registerPSW_CPU=Processor_CopyFromSystemStack(MAINMEMORYSIZE-2);
			} else {
				Processor_RaiseInterrupt(EXCEPTION_BIT);
			}
			break;		
		//V1-EX16a-END		

		//V1-EX0-BEGIN
		case MEMADD_INST:
			// Tell the main memory controller from where
			registerMAR_CPU=operand2;
			// Send to the MMU the address in which the reading has to take place: use the address bus for this
			Buses_write_AddressBus_From_To(CPU, MMU);
			// Tell the main memory controller to read
			registerCTRL_CPU=CTRLREAD;
			// Send to the MMU the operation
			Buses_write_ControlBus_From_To(CPU,MMU);

			registerAccumulator_CPU = operand1 + registerMBR_CPU.cell;
			registerPC_CPU++;
			break;
		//V1-EX0-END

		// Unknown instruction
		default : 
			operationCode=NONEXISTING_INST;
			registerPC_CPU++;
			break;
	}
	
	// Update PSW bits (ZERO_BIT, NEGATIVE_BIT, ...)
	Processor_UpdatePSW();
	
	// Show final part of HARDWARE message with	CPU registers
	// Show message: " (PC: registerPC_CPU, Accumulator: registerAccumulator_CPU, PSW: registerPSW_CPU [Processor_ShowPSW()]\n
	ComputerSystem_DebugMessage(69, HARDWARE, InstructionNames[operationCode],operand1,operand2,registerPC_CPU,registerAccumulator_CPU,registerPSW_CPU,Processor_ShowPSW());
}

//	Implement interrupt logic calling appropriate interrupt handle
void OperatingSystem_InterruptLogic(int entryPoint){
	switch (entryPoint){
		case SYSCALL_BIT: // SYSCALL_BIT=2
			OperatingSystem_HandleSystemCall();
			break;
		case EXCEPTION_BIT: // EXCEPTION_BIT=6
			OperatingSystem_HandleException();
			break;
		//V2-EX2c-BEGIN
		case CLOCKINT_BIT:
			OperatingSystem_HandleClockInterrupt();
			break;
		//V2-EX2c-END
		//Examen-Simulacro-2022
		case ILLEGALHALTEXECUTION_BIT:
			OperatingSystem_ShowTime(EXAM);
			ComputerSystem_DebugMessage(122, EXAM, executingProcessID, programList[processTable[executingProcessID].programListIndex]->executableName);
			OperatingSystem_TerminateProcess();			
			break;
	}	
}

Probado con:
./Simulator programVerySimple