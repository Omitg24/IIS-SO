Omar Teixeira GonzÃ¡lez, UO281847:
Ejercicio 2:

122,Process [@G%d - %s@@] modifies its priority from [@G%d@@] to [@G%d@@]\n

// A PCB contains all of the information about a process that is needed by the OS
typedef struct {
	int busy;
	int initialPhysicalAddress;
	int processSize;
	int state;
	int priority;
	int copyOfPCRegister;
	unsigned int copyOfPSWRegister;
	int programListIndex;
	//V1-EX11a-BEGIN
	int queueID;
	//V1-EX11a-END
	//V1-EX13c-BEGIN
	int copyOfAcumulatorRegister;
	//V1-EX13c-END
	//V2-EX5a-BEGIN
	int whenToWakeUp;
	//V2-EX5b-END
	//Examen-Simulacro-2022
	int sleepingAt;
} PCB;

//V2-EX5d-BEGIN
void OperatingSystem_MoveToTheBLOCKEDState(int PID) {
	processTable[PID].whenToWakeUp = abs(Processor_GetAccumulator()) + numberOfClockInterrupts + 1;		
	if (Heap_add(PID, sleepingProcessesQueue, QUEUE_WAKEUP , &numberOfSleepingProcesses, PROCESSTABLEMAXSIZE)>=0) {		
		OperatingSystem_SaveContext(executingProcessID);
		int previousState = processTable[PID].state;				
		processTable[PID].state=BLOCKED;
		//Examen-Simulacro-2022
		processTable[PID].sleepingAt=Clock_GetTime();						
		OperatingSystem_ShowTime(SYSPROC);
		ComputerSystem_DebugMessage(110, SYSPROC, PID, programList[processTable[PID].programListIndex]->executableName, statesNames[previousState], statesNames[BLOCKED]);		
	}
}
//V2-EX5d-END

//V2-EX2b-BEGIN
void OperatingSystem_HandleClockInterrupt(){ 

	int previousProcessID;
	int mostPriorityProcessID;
	int sleepingProcessWhenToWakeUp;
	int numberOfUnblockedProcesses = 0;
	int processAwakenID = 0;

	//V2-EX4-BEGIN
	numberOfClockInterrupts++;
	OperatingSystem_ShowTime(INTERRUPT);
	ComputerSystem_DebugMessage(120, INTERRUPT, numberOfClockInterrupts);
	//V2-EX4-END
	//V2-EX6a-BEGIN
	sleepingProcessWhenToWakeUp=processTable[Heap_getFirst(sleepingProcessesQueue, numberOfSleepingProcesses)].whenToWakeUp;
	while (numberOfSleepingProcesses>0 && sleepingProcessWhenToWakeUp==numberOfClockInterrupts){
		//Examen-Simulacro-2022
		processAwakenID = OperatingSystem_ExtractFromSleepingProcessesQueue();
		processTable[processAwakenID].priority = processTable[processAwakenID].priority - (Clock_GetTime() - processTable[processAwakenID].sleepingAt);
		if (processTable[processAwakenID].priority < 1) {
			processTable[processAwakenID].priority=1;
		}
		OperatingSystem_ShowTime(EXAM);
		ComputerSystem_DebugMessage(122, EXAM, processAwakenID, programList[processTable[processAwakenID].programListIndex]->executableName, processTable[processAwakenID].sleepingAt, Clock_GetTime());
		OperatingSystem_MoveToTheREADYState(processAwakenID);			
		numberOfUnblockedProcesses++;		
	}	
	//V2-EX6a-END
	//V2-EX6b-BEGIN
	if (numberOfUnblockedProcesses>0){
		OperatingSystem_PrintStatus();				
		//V2-EX6c-BEGIN
		mostPriorityProcessID = OperatingSystem_GetMostPriorityProcess();
		if (mostPriorityProcessID != NOPROCESS){
			if (processTable[executingProcessID].queueID == processTable[mostPriorityProcessID].queueID) {
				if (processTable[executingProcessID].priority > processTable[mostPriorityProcessID].priority ){
					previousProcessID = executingProcessID;

					OperatingSystem_ShowTime(SHORTTERMSCHEDULE);
					ComputerSystem_DebugMessage(121, SHORTTERMSCHEDULE, previousProcessID, programList[processTable[previousProcessID].programListIndex]->executableName, mostPriorityProcessID, programList[processTable[mostPriorityProcessID].programListIndex]->executableName);

					OperatingSystem_PreemptRunningProcess();
					OperatingSystem_Dispatch(OperatingSystem_ShortTermScheduler());			
					
				}	
			} else if (processTable[executingProcessID].queueID == DAEMONSQUEUE && processTable[mostPriorityProcessID].queueID == USERPROCESSQUEUE){
				previousProcessID = executingProcessID;

				OperatingSystem_ShowTime(SHORTTERMSCHEDULE);
				ComputerSystem_DebugMessage(121, SHORTTERMSCHEDULE, previousProcessID, programList[processTable[previousProcessID].programListIndex]->executableName, mostPriorityProcessID, programList[processTable[mostPriorityProcessID].programListIndex]->executableName);

				OperatingSystem_PreemptRunningProcess();
				OperatingSystem_Dispatch(OperatingSystem_ShortTermScheduler());
			}
			//V2-EX6d-BEGIN
			OperatingSystem_PrintStatus();
			//V2-EX6d-END
		}		
		//V2-EX6c-END	
	}
	//V2-EX6b-END		
}
//V2-EX2b-END

Probado con:
./Simulator programV2-fa iDontExist programV2-fb programV2-fc